/*******************************************************************************
 *
 * Module: 8-bit Arithmetic Logic Unit (ALU)
 * Project: 8-bit RISC Processor
 * Author: Shiwank Gupta
 *
 * Description: This module performs basic arithmetic and logical operations.
 * It takes two 8-bit operands and a 3-bit operation code.
 *
 ******************************************************************************/

module alu (
    // Inputs
    input      [7:0] a,
    input      [7:0] b,
    input      [2:0] alu_op,
    // Outputs
    output reg [7:0] result,
    output reg       zero_flag
);

    // ALU Operation Codes (ALUOp)
    localparam ALU_ADD = 3'b001;
    localparam ALU_SUB = 3'b010;
    localparam ALU_AND = 3'b011;
    localparam ALU_OR  = 3'b100;
    localparam ALU_SLT = 3'b101; // Set on Less Than

    // Combinational logic for ALU operations
    always @(*) begin
        case (alu_op)
            ALU_ADD: result = a + b;
            ALU_SUB: result = a - b;
            ALU_AND: result = a & b;
            ALU_OR:  result = a | b;
            ALU_SLT: result = (a < b) ? 8'd1 : 8'd0;
            default: result = 8'hXX; // Default to unknown
        endcase
    end

    // Combinational logic for the zero flag
    // The zero flag is high if the result of the operation is zero.
    always @(*) begin
        if (result == 8'd0) begin
            zero_flag = 1'b1;
        end else begin
            zero_flag = 1'b0;
        end
    end

endmodule
